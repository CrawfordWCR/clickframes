#set($className="${page.name}Service")
#set($serviceLayerClass="${page.name}Service")
#set($serviceLayerVariableName="${page.id}Service")
package ${techspec.packageName}.controller;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Scope;

#foreach ($entity in $controller.uniqueEntities)
import ${techspec.packageName}.entity.${entity.name};
#end

/**
 * Glue code to bind $page.title Service with the view framework (Seam)
 * 
 #if ($page.description) 
 * ${page.description}
 #end
 *
 * Automatically generated by clickframes
 * 
 * @author Vineet Manohar
 */
@Name("${page.id}Controller")
@Scope(ScopeType.CONVERSATION)
public class ${page.name}Controller extends Generated${page.name}Controller {
    @SuppressWarnings("unused")
    private final Log logger = LogFactory.getLog(getClass());

### outputList
#foreach ($outputList in $page.outputLists)
### outputList actions
#foreach ($action in $outputList.actions)
    /**
     * ${action.title} 
     * $!{action.description}
     */
    public String ${action.id}${outputList.name}() {
        ${outputList.entity.name} ${outputList.entity.id} = get${outputList.name}Selection();
        logger.warn("Method not implemented yet. Please implement");

        return null;
    }
#end ###foreach $action

## try customizing queries
#if ($page.loginRequired && $outputList.entity.foreignEntityMap.get($appspec.loginEntity))
    @Override
    protected java.util.List<${outputList.entity.name}> load${outputList.name}() {
        return ${outputList.entity.id}Dao.findBy("${outputList.entity.foreignEntityMap.get($appspec.loginEntity).get(0).id}", getLoggedInUser());
    }
#end## customization of load output list
#end ###foreach $outputList

### form level actions
#foreach ($form in $page.forms)
#foreach ($action in $form.actions)
#if(!$page.loginPage || !$form.loginForm || !$action.loginAction)
    /**
     * ${action.title}
     *
 #if ($action.description) 
     * ${action.description}
 #end
     * Automatically generated by clickframes
     */
    @Override
    public ${form.name}${action.name}Outcome ${form.id}${action.name}() {
#if ($action.type == "CREATE")
#foreach($entity in $form.entities)
        // "Create" semantics of "CRUD"
        // ${entity.name} ${entity.id} = get${form.name}${entity.name}();
        ${entity.id} = get${form.name}${entity.name}();

#if ($appspec.loginEntity)
#foreach ($property in $entity.foreignEntityMap.get(${appspec.loginEntity}))
        // set the $property.id of this $entity.id
        ${entity.id}.set${property.name}(getLoggedInUser());
#end##foreach
#end##if login entity

        ${entity.id}Dao.create(${entity.id});
        
## begin -- if there are any output lists on this page for this entity, clear it
#foreach ($outputList in $page.outputListMap.get($entity))
		clear${outputList.name}();
#end
## end -- if there are any output lists on this page for this entity, clear it
## begin - clear form 
## if this form was used to create something, we want the form cleared
## as we don't want to show old values again
        clear${form.name}();
## end - clear form
        return ${form.id}${action.name}${action.defaultOutcome.name}();
#end
#elseif ($action.type == "CREATE_OR_UPDATE")
#foreach($entity in $form.entities)
        // ${entity.name} ${entity.id} = get${form.name}${entity.name}();
        ${entity.id} = get${form.name}${entity.name}();

        // "Create or Update" semantics of "CRUD"
        ${entity.id}Dao.createOrUpdate(${entity.id});
#end
        return ${form.id}${action.name}${action.defaultOutcome.name}();
#elseif ($action.type == "UPDATE")
#foreach($entity in $form.entities)
        // ${entity.name} ${entity.id} = get${form.name}${entity.name}();
        ${entity.id} = get${form.name}${entity.name}();
        // "Update" semantics of "CRUD"
        ${entity.id}Dao.update(${entity.id});
#end
        return ${form.id}${action.name}${action.defaultOutcome.name}();
#elseif ($action.type == "DELETE")
#foreach($entity in $form.entities)
        // "Delete" semantics of "CRUD"
        ${entity.id}Dao.delete(${entity.id});
#end
        return ${form.id}${action.name}${action.defaultOutcome.name}();
#elseif ($action.type == "LOGOUT")
        identity.logout();
        return ${form.id}${action.name}${action.defaultOutcome.name}();
#else ## // if action.type == create
#if($page.loginPage && $form.loginForm && $action.loginAction && ${form.entityInputs.get(${appspec.loginEntity})}) ## //if this is login form and login form is bound to login entity 
        ${appspec.loginEntity.id} = ${appspec.loginEntity.id}Dao.findByUsernameAndPassword(${appspec.loginEntity.id}.get${appspec.loginUsernameEntityProperty.name}(), ${appspec.loginEntity.id}.get${appspec.loginPasswordEntityProperty.name}());
#else ## // if this is NOT login form and login form is bound to login entity
        // TODO: fill out real implementation here
        logger.warn("Method not implemented yet.  Please implement ${className}.${action.id}()");
        return ${form.id}${action.name}${action.defaultOutcome.name}();
#end ## // if this is login form and login form is bound to login entity
#end ##if action type is present
    }
#end
#end
#end

#foreach ($form in $page.forms)
#foreach ($action in $form.actions)
#foreach($outcome in $action.outcomes)
    /**
     * $outcome.title
     */
   public ${form.name}${action.name}Outcome ${form.id}${action.name}${outcome.name}() {
#foreach ($email in $outcome.emails)
        this.${email.id}Email.sendMail();
#end
        return ${form.name}${action.name}Outcome.${outcome.id};
   }
#end## foreach($outcome in $action.outcomes)

#end## foreach action
#end## foreach form

    private static final long serialVersionUID = 1L;
}